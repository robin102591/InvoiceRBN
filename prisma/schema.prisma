// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  invoices Invoice[]
  products Product[]
  customers Customer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invoice {
  id            String        @id @default(uuid())
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  
  currency      String
  invoiceNumber String
  note          String?
  invoiceItems  InvoiceItem[] // Relation to invoice items


  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

enum InvoiceStatus {
  PAID
  PENDING
}

model InvoiceItem {
  id          String  @id @default(uuid())
  quantity    Int
  rate        Float
  total       Float // Calculated as quantity * rate
  description String? // Optional description for flexibility
  productId String

  invoiceId String
  

  Invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                String        @id @default(uuid())
  name              String
  description       String?
  price             Float
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  unitOfMeasurement String?
  invoiceItems      InvoiceItem[] // Relation to invoice items
  User              User?         @relation(fields: [userId], references: [id])
  userId            String?
}

model Customer {
  id       String    @id @default(uuid())
  name     String
  email    String
  address  String
  phone    String?
  invoices Invoice[] // One-to-many relation with Invoice
  User              User?         @relation(fields: [userId], references: [id])
  userId            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
